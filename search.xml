<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL之索引</title>
    <url>/2019/12/24/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95INDEX/</url>
    <content><![CDATA[<h1 id="INDEX-索引"><a href="#INDEX-索引" class="headerlink" title="INDEX 索引"></a>INDEX 索引</h1><h2 id="1-索引介绍"><a href="#1-索引介绍" class="headerlink" title="1.索引介绍"></a>1.索引介绍</h2><pre><code>索引：是排序的快速查找的特殊数据结构，定义作为查找条件的字段上，又称为key，索引通过存储引擎实现
优点：
    索引可以降低服务需要扫描的数据量，减少了IO次数
    索引可以帮助服务器避免排序和使用临时表
    索引可以帮助将随机I/O转为顺序I/O
缺点：
    占用额外空间，影响插入速度</code></pre><h3 id="1-1-索引类型"><a href="#1-1-索引类型" class="headerlink" title="1.1 索引类型"></a>1.1 索引类型</h3><ul>
<li>B+ TREE、HASH、R TREE、FULLTEXT</li>
<li>聚簇（集）索引、非聚簇索引：数据和索引是否存储在一起</li>
<li>主键索引、二级（辅助）索引</li>
<li>稠密索引、稀疏索引：是否索引了每一个数据项</li>
<li>简单索引、组合索引</li>
<li>左前缀索引：取前面的字符做索引</li>
<li>覆盖索引：从索引中即可取出要查询的数据，性能高<h3 id="1-2-索引分类"><a href="#1-2-索引分类" class="headerlink" title="1.2 索引分类"></a>1.2 索引分类</h3><ul>
<li>普通索引index :加速查找<br>通过<code>ALTER TABLE table_name ADD INDEX index_name (column);</code>创建普通索引</li>
<li>唯一索引<ul>
<li>主键索引：primary key ：加速查找+约束（不为空且唯一）</li>
<li>唯一索引：unique：加速查找+约束 （唯一）</li>
</ul>
</li>
<li>联合索引</li>
<li>primary key(id,name):联合主键索引</li>
<li>unique(id,name):联合唯一索引</li>
<li>index(id,name):联合普通索引<br>通过<code>ALTER TABLE table_name ADD INDEX index_name(column1,column2, column3);</code>创建组合索引</li>
</ul>
</li>
<li>全文索引fulltext :在文本中查找关键词，而不是直接比较索引中的值，类似搜索引擎，用于搜索很长一篇文章的时候，效果最好。<h3 id="1-3-索引结构"><a href="#1-3-索引结构" class="headerlink" title="1.3 索引结构"></a>1.3 索引结构</h3><h4 id="1-3-1-二叉树"><a href="#1-3-1-二叉树" class="headerlink" title="1.3.1 二叉树"></a>1.3.1 二叉树</h4><img src="https://img-blog.csdnimg.cn/20191126130318940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM0MTUwNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">          <ul>
<li><strong>树叶节点存储数据</strong></li>
<li><strong>根节点，树枝节点不存储数据，只存储索引</strong><h4 id="1-3-2-B-Tree-索引"><a href="#1-3-2-B-Tree-索引" class="headerlink" title="1.3.2 B-Tree 索引"></a>1.3.2 B-Tree 索引</h4></li>
<li><strong>B-TREE 每个节点都是一个二元数组: [key, data]，所有节点都可以存储数据。key为索引key,data为除key之外的数据</strong></li>
<li><strong>首先从根节点进行二分查找，如果找到则返回对应节点的data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或未找到节点返回null指针。</strong></li>
</ul>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20191126131248992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM0MTUwNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="1-3-3-B-Tree"><a href="#1-3-3-B-Tree" class="headerlink" title="1.3.3 B+Tree"></a>1.3.3 B+Tree</h4><p><img src="https://img-blog.csdnimg.cn/20191126130648962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM0MTUwNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><strong>B+Tree索引：按顺序存储，每一个叶子节点到根结点的距离是相同的；左前缀索引，适合查询范围类的数据</strong></li>
<li><strong>可以使用B+Tree索引的查询类型：</strong><br>  全值匹配：精确所有索引列，如：姓wang，名xiaochun，年龄30<br>  匹配最左前缀：即只使用索引的第一列，如：姓wang<br>  匹配列前缀：只匹配一列值开头部分，如：姓以w开头的<br>  匹配范围值：如：姓ma和姓wang之间<br>  精确匹配某一列并范围匹配另一列：如：姓wang,名以x开头的<br>  只访问索引的查询</li>
<li><strong>B+Tree索引的限制：</strong><br>如不从最左列开始，则无法使用索引，如：查找名为xiaochun，或姓为g结尾<br>不能跳过索引中的列：如：查找姓wang，年龄30的，只能使用索引第一列<br>特别提示：<br>索引列的顺序和查询语句的写法应相匹配，才能更好的利用索引<br>为优化性能，可能需要针对相同的列但顺序不同创建不同的索引来满足不同类型的查询需求</li>
</ul>
<h4 id="1-3-4-全文索引-FULLTEXT"><a href="#1-3-4-全文索引-FULLTEXT" class="headerlink" title="1.3.4 全文索引(FULLTEXT)"></a>1.3.4 全文索引(FULLTEXT)</h4><p>在文本中查找关键词，而不是直接比较索引中的值，类似搜索引擎<br>InnoDB从MySQL 5.6之后也开始支持</p>
<h4 id="1-3-5-聚簇和非聚簇索引，主键和二级索引"><a href="#1-3-5-聚簇和非聚簇索引，主键和二级索引" class="headerlink" title="1.3.5 聚簇和非聚簇索引，主键和二级索引"></a>1.3.5 聚簇和非聚簇索引，主键和二级索引</h4><p><img src="https://img-blog.csdnimg.cn/20191126132027945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM0MTUwNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="1-3-6-冗余和重复索引"><a href="#1-3-6-冗余和重复索引" class="headerlink" title="1.3.6 冗余和重复索引"></a>1.3.6 冗余和重复索引</h4><p>冗余索引：（A），（A，B）<br>重复索引：已经有索引，再次建立索引</p>
<h3 id="1-4-索引优化"><a href="#1-4-索引优化" class="headerlink" title="1.4 索引优化"></a>1.4 索引优化</h3><h4 id="1-4-1-索引优化使用"><a href="#1-4-1-索引优化使用" class="headerlink" title="1.4.1 索引优化使用"></a>1.4.1 索引优化使用</h4><ul>
<li>独立地使用列：尽量避免其参与运算，独立的列指索引列不能是表达式的一部分，也不能是函数的参数，在where条件中，始终将索引列单独放在比较符号的一侧</li>
<li>左前缀索引：构建指定索引字段的左侧的字符数，要通过索引选择性来评估</li>
<li>索引选择性：不重复的索引值和数据表的记录总数的比值</li>
<li>多列索引：AND操作时更适合使用多列索引，而非为每个列创建单独的索引</li>
<li>选择合适的索引列顺序：无排序和分组时，将选择性最高放左侧<h4 id="1-4-2-索引优化建议"><a href="#1-4-2-索引优化建议" class="headerlink" title="1.4.2 索引优化建议"></a>1.4.2 索引优化建议</h4><ul>
<li>只要列中含有NULL值，就最好不要在此列设置索引，复合索引如果有NULL值，此列在使用时也不会使用索引<ul>
<li>尽量使用短索引，如果可以，应该制定一个前缀长度</li>
<li>对于经常在where子句使用的列，最好设置索引</li>
<li>对于有多个列where或者order by子句，应该建立复合索引</li>
<li>对于like语句，以%或者‘-’开头的不会使用索引，以%结尾会使用索引</li>
<li>尽量不要在列上进行运算（函数操作和表达式操作）</li>
<li>尽量不要使用not in和&lt;&gt;操作<h4 id="1-4-3-SQL语句性能优化"><a href="#1-4-3-SQL语句性能优化" class="headerlink" title="1.4.3 SQL语句性能优化"></a>1.4.3 SQL语句性能优化</h4></li>
</ul>
</li>
</ul>
</li>
<li>查询时，能不要<em>就不用</em>，尽量写全字段名</li>
<li>大部分情况连接效率远大于子查询</li>
<li>多表连接时，尽量小表驱动大表，即小表 join 大表</li>
<li>在有大量记录的表分页时使用limit</li>
<li>对于经常使用的查询，可以开启缓存</li>
<li>多使用explain和profile分析查询语句</li>
<li>查看慢查询日志，找出执行时间长的sql语句优化<h3 id="1-5-管理索引"><a href="#1-5-管理索引" class="headerlink" title="1.5 管理索引"></a>1.5 管理索引</h3><h4 id="1-5-1-创建索引"><a href="#1-5-1-创建索引" class="headerlink" title="1.5.1 创建索引"></a>1.5.1 创建索引</h4></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE [UNIQUE] INDEX index_name ON tbl_name (index_col_name[(length)],...);</span><br><span class="line">ALTER TABLE tbl_name ADD INDEX index_name(index_col_name);</span><br><span class="line"><span class="built_in">help</span> CREATE INDEX;</span><br></pre></td></tr></table></figure>
<h4 id="1-5-2-删除索引"><a href="#1-5-2-删除索引" class="headerlink" title="1.5.2 删除索引"></a>1.5.2 删除索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP INDEX index_name ON tbl_name;</span><br><span class="line">ALTER TABLE tbl_name DROP INDEX index_name(index_col_name);</span><br></pre></td></tr></table></figure>

<h4 id="1-5-3-查看索引"><a href="#1-5-3-查看索引" class="headerlink" title="1.5.3 查看索引"></a>1.5.3 查看索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHOW INDEXES FROM [db_name.]tbl_name;</span><br></pre></td></tr></table></figure>

<h4 id="1-5-4-优化表空间"><a href="#1-5-4-优化表空间" class="headerlink" title="1.5.4 优化表空间"></a>1.5.4 优化表空间</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OPTIMIZE TABLE tb_name;</span><br></pre></td></tr></table></figure>

<h4 id="1-5-5-查看索引的使用"><a href="#1-5-5-查看索引的使用" class="headerlink" title="1.5.5 查看索引的使用"></a>1.5.5 查看索引的使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET GLOBAL userstat=1;</span><br><span class="line">SHOW INDEX_STATISTICS;</span><br></pre></td></tr></table></figure>

<h4 id="1-5-6-EXPLAIN-工具"><a href="#1-5-6-EXPLAIN-工具" class="headerlink" title="1.5.6 EXPLAIN 工具"></a>1.5.6 EXPLAIN 工具</h4><p> <strong>功能：可以通过EXPLAIN来分析索引的有效性,获取查询执行计划信息，用来查看查询优化器如何执行查询</strong><br> 语法：<code>EXPLAIN SELECT clause</code><br><strong>参考资料： <a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/explain-output.html</a></strong><br><img src="https://img-blog.csdnimg.cn/20191126133833645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM0MTUwNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191126133911318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM0MTUwNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>iptables思维导图</title>
    <url>/2019/12/22/iptables%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20191219231851601.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM0MTUwNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>iptables</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux防火墙</title>
    <url>/2019/12/22/Linux%20%E9%98%B2%E7%81%AB%E5%A2%99%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="Linux-防火墙"><a href="#Linux-防火墙" class="headerlink" title="Linux 防火墙"></a>Linux 防火墙</h1><h2 id="1-安全技术和防火墙"><a href="#1-安全技术和防火墙" class="headerlink" title="1 安全技术和防火墙"></a>1 安全技术和防火墙</h2><h3 id="1-1-安全技术"><a href="#1-1-安全技术" class="headerlink" title="1.1 安全技术"></a>1.1 安全技术</h3><ul>
<li>入侵检测与管理系统（Intrusion Detection Systems）：特点是不阻断任何网络访问，量化、定位来自内外网络的威胁情况，主要以提供报告和事后监督为主，提供有针对性的指导措施和安全决策依据。一般采用旁路部署方式</li>
<li>入侵防御系统（Intrusion Prevention System）：以透明模式工作，分析数据包的内容如：溢出<br>攻击、拒绝服务攻击、木马、蠕虫、系统漏洞等进行准确的分析判断，在判定为攻击行为后立即予以阻断，主动而有效的保护网络的安全，一般采用在线部署方式</li>
<li>防火墙（ FireWall ）：隔离功能，工作在网络或主机边缘，对进出网络或主机的数据包基于一定<br>的规则检查，并在匹配某规则时由规则定义的行为进行处理的一组功能的组件，基本上的实现都是默认情况下关闭所有的通过型访问，只开放允许访问的策略</li>
</ul>
<h3 id="1-2-防火墙的分类"><a href="#1-2-防火墙的分类" class="headerlink" title="1.2 防火墙的分类"></a>1.2 防火墙的分类</h3><ul>
<li>按保护范围划分：<ul>
<li>主机防火墙：服务范围为当前主机</li>
<li>网络防火墙：服务范围为防火墙一侧的局域网</li>
</ul>
</li>
<li>按实现方式划分:<ul>
<li>硬件防火墙：在专用硬件级别实现部分功能的防火墙；另一个部分功能基于软件实现，如：华为，天融信Checkpoint，NetScreen等 <ul>
<li>软件防火墙：运行于通用硬件平台之上的防火墙的应用软件</li>
</ul>
</li>
</ul>
</li>
<li>按网络协议划分：<ul>
<li>网络层防火墙：OSI模型下四层</li>
<li>应用层防火墙/代理服务器：代理网关，OSI模型七层<br><strong>包过滤防火墙</strong><br><img src="https://img-blog.csdnimg.cn/20191220193007875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM0MTUwNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>网络层对数据包进行选择，选择的依据是系统内设置的过滤逻辑，被称为访问控制列表（ACL），通过检查数据流中每个数据的源地址，目的地址，所用端口号和协议状态等因素，或他们的组合来确定是否允许该数据包通过<br>优点：对用户来说透明，处理速度快且易于维护<br>缺点：无法检查应用层数据，如病毒等</li>
</ul>
</li>
</ul>
<p><strong>应用层防火墙</strong><br><img src="https://img-blog.csdnimg.cn/20191220194021173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM0MTUwNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>应用层防火墙/代理服务型防火墙，也称为代理服务器（Proxy Server)<br>将所有跨越防火墙的网络通信链路分为两段内外网用户的访问都是通过代理服务器上的“链接”来实现<br>优点：在应用层对数据进行检查，比较安全<br>缺点：增加防火墙的负载</p>
<ul>
<li><strong>提示：现实生产环境中所使用的防火墙一般都是二者结合体，即先检查网络数据，通过之后再送到应用层去检查</strong></li>
</ul>
<h2 id="2-防火墙工具介绍"><a href="#2-防火墙工具介绍" class="headerlink" title="2 防火墙工具介绍"></a>2 防火墙工具介绍</h2><h3 id="2-1-iptables"><a href="#2-1-iptables" class="headerlink" title="2.1 iptables"></a>2.1 iptables</h3><p>由软件包iptables提供的命令行工具，工作在用户空间，用来编写规则，写好的规则被送往netfilter，告诉内核如何去处理信息包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment"># iptables --version</span></span><br><span class="line">iptables v1.8.2 (nf_tables)</span><br><span class="line">[root@centos8 ~]<span class="comment">#ll /usr/sbin/iptables</span></span><br><span class="line">lrwxrwxrwx. 1 root root 17 May 11 2019 /usr/sbin/iptables -&gt; xtables-nft-multi</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment">#ll /usr/sbin/iptables</span></span><br><span class="line">lrwxrwxrwx. 1 root root 13 Dec 9 2018 /usr/sbin/iptables -&gt; xtables-multi</span><br><span class="line">[root@centos7 ~]<span class="comment"># iptables --version</span></span><br><span class="line">iptables v1.4.21</span><br><span class="line"></span><br><span class="line">[root@centos6 ~]<span class="comment">#iptables --version</span></span><br><span class="line">iptables v1.4.7</span><br><span class="line">[root@centos6 ~]<span class="comment">#ll /sbin/iptables</span></span><br><span class="line">lrwxrwxrwx. 1 root root 33 Dec 12 2018 /sbin/iptables -&gt;</span><br><span class="line">/etc/alternatives/iptables.x86_64</span><br><span class="line">[root@centos6 ~]<span class="comment">#ll /etc/alternatives/iptables.x86_64</span></span><br><span class="line">lrwxrwxrwx. 1 root root 20 Dec 12 2018 /etc/alternatives/iptables.x86_64 -&gt;</span><br><span class="line">/sbin/iptables-1.4.7</span><br><span class="line">[root@centos6 ~]<span class="comment">#ll /sbin/iptables</span></span><br><span class="line">lrwxrwxrwx. 1 root root 33 Dec 12 2018 /sbin/iptables -&gt; /etc/alternatives/iptables.x86_64</span><br></pre></td></tr></table></figure>
<h3 id="2-2-firewalld"><a href="#2-2-firewalld" class="headerlink" title="2.2 firewalld"></a>2.2 firewalld</h3><p>从CentOS 7 版开始引入了新的前端管理工具</p>
<ul>
<li>软件包：<ul>
<li>firewalld<ul>
<li>firewalld-config</li>
</ul>
</li>
</ul>
</li>
<li>管理工具：<ul>
<li>firewall-cmd 命令行工具<ul>
<li>firewall-config 图形工作<h3 id="2-3-nftables"><a href="#2-3-nftables" class="headerlink" title="2.3 nftables"></a>2.3 nftables</h3>此软件是CentOS 8 新特性,Nftables最初在法国巴黎的Netfilter Workshop 2008上发表，然后由长期的netfilter核心团队成员和项目负责人Patrick McHardy于2009年3月发布。它在2013年末合并到Linux内核中，自2014年以来已在内核3.13中可用。它重用了netfilter框架的许多部分，例如连接跟踪和NAT功能。它还保留了命名法和基本iptables设计的几个部分，例如表，链和规则。就像iptables一样，表充当链的容器，并且链包含单独的规则，这些规则可以执行操作，例如丢弃数据包，移至下一个规则或跳至新链。从用户的角度来看，nftables添加了一个名为nft的新工具，该工具替代了iptables，arptables和ebtables中的所有其他工具。从体系结构的角度来看，它还替换了内核中处理数据包过滤规则集运行时评估的那些部分。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#rpm -qi nftables</span></span><br><span class="line">Name : nftables</span><br><span class="line">Epoch : 1</span><br><span class="line">Version : 0.9.0</span><br><span class="line">Release : 8.el8</span><br><span class="line">Architecture: x86_64</span><br><span class="line">Install Date: Wed 25 Sep 2019 09:29:06 PM CST</span><br><span class="line">Group : Unspecified</span><br><span class="line">Size : 758622</span><br><span class="line">License : GPLv2</span><br><span class="line">Signature : RSA/SHA256, Tue 02 Jul 2019 08:19:09 AM CST, Key ID</span><br><span class="line">05b555b38483c65d</span><br><span class="line">Source RPM : nftables-0.9.0-8.el8.src.rpm</span><br><span class="line">Build Date : Sat 11 May 2019 11:06:46 PM CST</span><br><span class="line">Build Host : x86-01.mbox.centos.org</span><br><span class="line">Relocations : (not relocatable)</span><br><span class="line">Packager : CentOS Buildsys &lt;bugs@centos.org&gt;</span><br><span class="line">Vendor : CentOS</span><br><span class="line">URL : http://netfilter.org/projects/nftables/</span><br><span class="line">Summary : Netfilter Tables userspace utillites</span><br><span class="line">Description :</span><br><span class="line">Netfilter Tables userspace utilities.</span><br></pre></td></tr></table></figure>
<h2 id="3-netfilter-中五个勾子函数和报文流向"><a href="#3-netfilter-中五个勾子函数和报文流向" class="headerlink" title="3 netfilter 中五个勾子函数和报文流向"></a>3 netfilter 中五个勾子函数和报文流向</h2><p>Netfilter在内核中选取五个位置放了五个hook(勾子) function(INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING)，而这五个hook function向用户开放，用户可以通过一个命令工具(iptables）向其写入规则<br>由信息过滤表（table）组成，包含控制IP包处理的规则集（rules），规则被分组放在链（chain）上<br><img src="https://img-blog.csdnimg.cn/20191220195118511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTM0MTUwNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>提示：从 Linux kernel 4.2 版以后，Netfilter 在prerouting 前加了一个 ingress 勾子函数。可以使用这个新的入口挂钩来过滤来自第2层的流量，这个新挂钩比预路由要早，基本上是 tc 命令（流量控制工具）的替代品</strong></p>
<ul>
<li><strong>三种报文流向</strong><ul>
<li>流入本机：PREROUTING –&gt; INPUT–&gt;用户空间进程<ul>
<li>流出本机：用户空间进程 –&gt;OUTPUT–&gt; POSTROUTING</li>
<li>转发：PREROUTING –&gt; FORWARD –&gt; POSTROUTING</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>iptables</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
</search>
